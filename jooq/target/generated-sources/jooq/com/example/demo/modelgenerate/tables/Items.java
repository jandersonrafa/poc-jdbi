/*
 * This file is generated by jOOQ.
 */
package com.example.demo.modelgenerate.tables;


import com.example.demo.modelgenerate.Jdbi;
import com.example.demo.modelgenerate.Keys;
import com.example.demo.modelgenerate.tables.records.ItemsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Items extends TableImpl<ItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jdbi.items</code>
     */
    public static final Items ITEMS = new Items();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsRecord> getRecordType() {
        return ItemsRecord.class;
    }

    /**
     * The column <code>jdbi.items.id</code>.
     */
    public final TableField<ItemsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jdbi.items.orderid</code>.
     */
    public final TableField<ItemsRecord, Long> ORDERID = createField(DSL.name("orderid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jdbi.items.one</code>.
     */
    public final TableField<ItemsRecord, String> ONE = createField(DSL.name("one"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.two</code>.
     */
    public final TableField<ItemsRecord, String> TWO = createField(DSL.name("two"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.tree</code>.
     */
    public final TableField<ItemsRecord, String> TREE = createField(DSL.name("tree"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.four</code>.
     */
    public final TableField<ItemsRecord, String> FOUR = createField(DSL.name("four"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.five</code>.
     */
    public final TableField<ItemsRecord, String> FIVE = createField(DSL.name("five"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.six</code>.
     */
    public final TableField<ItemsRecord, String> SIX = createField(DSL.name("six"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.seven</code>.
     */
    public final TableField<ItemsRecord, String> SEVEN = createField(DSL.name("seven"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.eight</code>.
     */
    public final TableField<ItemsRecord, String> EIGHT = createField(DSL.name("eight"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.nine</code>.
     */
    public final TableField<ItemsRecord, String> NINE = createField(DSL.name("nine"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.items.ten</code>.
     */
    public final TableField<ItemsRecord, String> TEN = createField(DSL.name("ten"), SQLDataType.VARCHAR(36), this, "");

    private Items(Name alias, Table<ItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Items(Name alias, Table<ItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jdbi.items</code> table reference
     */
    public Items(String alias) {
        this(DSL.name(alias), ITEMS);
    }

    /**
     * Create an aliased <code>jdbi.items</code> table reference
     */
    public Items(Name alias) {
        this(alias, ITEMS);
    }

    /**
     * Create a <code>jdbi.items</code> table reference
     */
    public Items() {
        this(DSL.name("items"), null);
    }

    public <O extends Record> Items(Table<O> child, ForeignKey<O, ItemsRecord> key) {
        super(child, key, ITEMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jdbi.JDBI;
    }

    @Override
    public Identity<ItemsRecord, Long> getIdentity() {
        return (Identity<ItemsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ItemsRecord> getPrimaryKey() {
        return Keys.ITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<ItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEMS__ITEMS_FKEY);
    }

    private transient Orders _orders;

    /**
     * Get the implicit join path to the <code>jdbi.orders</code> table.
     */
    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.ITEMS__ITEMS_FKEY);

        return _orders;
    }

    @Override
    public Items as(String alias) {
        return new Items(DSL.name(alias), this);
    }

    @Override
    public Items as(Name alias) {
        return new Items(alias, this);
    }

    @Override
    public Items as(Table<?> alias) {
        return new Items(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(String name) {
        return new Items(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Name name) {
        return new Items(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Table<?> name) {
        return new Items(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
