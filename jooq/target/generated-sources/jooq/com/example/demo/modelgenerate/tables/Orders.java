/*
 * This file is generated by jOOQ.
 */
package com.example.demo.modelgenerate.tables;


import com.example.demo.modelgenerate.Jdbi;
import com.example.demo.modelgenerate.Keys;
import com.example.demo.modelgenerate.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jdbi.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>jdbi.orders.id</code>.
     */
    public final TableField<OrdersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jdbi.orders.amount</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>jdbi.orders.active</code>.
     */
    public final TableField<OrdersRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>jdbi.orders.createddate</code>.
     */
    public final TableField<OrdersRecord, LocalDate> CREATEDDATE = createField(DSL.name("createddate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>jdbi.orders.createdtime</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> CREATEDTIME = createField(DSL.name("createdtime"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>jdbi.orders.numberorder</code>.
     */
    public final TableField<OrdersRecord, Integer> NUMBERORDER = createField(DSL.name("numberorder"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jdbi.orders.one</code>.
     */
    public final TableField<OrdersRecord, String> ONE = createField(DSL.name("one"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.two</code>.
     */
    public final TableField<OrdersRecord, String> TWO = createField(DSL.name("two"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.tree</code>.
     */
    public final TableField<OrdersRecord, String> TREE = createField(DSL.name("tree"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.four</code>.
     */
    public final TableField<OrdersRecord, String> FOUR = createField(DSL.name("four"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.five</code>.
     */
    public final TableField<OrdersRecord, String> FIVE = createField(DSL.name("five"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.six</code>.
     */
    public final TableField<OrdersRecord, String> SIX = createField(DSL.name("six"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.seven</code>.
     */
    public final TableField<OrdersRecord, String> SEVEN = createField(DSL.name("seven"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.eight</code>.
     */
    public final TableField<OrdersRecord, String> EIGHT = createField(DSL.name("eight"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.nine</code>.
     */
    public final TableField<OrdersRecord, String> NINE = createField(DSL.name("nine"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>jdbi.orders.ten</code>.
     */
    public final TableField<OrdersRecord, String> TEN = createField(DSL.name("ten"), SQLDataType.VARCHAR(36), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jdbi.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>jdbi.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>jdbi.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jdbi.JDBI;
    }

    @Override
    public Identity<OrdersRecord, Long> getIdentity() {
        return (Identity<OrdersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.ORDERS_PKEY;
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    @Override
    public Orders as(Table<?> alias) {
        return new Orders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Table<?> name) {
        return new Orders(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, BigDecimal, Boolean, LocalDate, LocalDateTime, Integer, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super BigDecimal, ? super Boolean, ? super LocalDate, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super BigDecimal, ? super Boolean, ? super LocalDate, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
